from calc_model import Model
from calc_view import View


class Controller:
    """Controller class for the calculator application."""
    def __init__(self, model: Model, view: View):
        self.model = model
        self.view = view
        self.error_occurred = False

    def event_handler(self, event):
        """Handle events generated by user interaction with the calculator.
        This method processes events such as button clicks and updates the display accordingly."""
        displaying = self.view.display_text.get()
        if str(displaying) == "0":
            self.view.display_text.set("")
        key_pressed = event.widget["text"]
        if key_pressed == "=":
            user_input = self.view.display_text.get()
            result = self.model.calculate(user_input)
            if result is not None:
                self.view.update_display(f"{result:.7g}")
                self.model.update_history(user_input, result)
                self.view.update_history_display()
            else:
                self.view.display_error()
                self.error_occurred = True
        elif key_pressed == "( )":
            self.paren_clicked()
        elif key_pressed == "DEL":
            self.error_occurred = False
            for function in self.view.FUNCTIONS:
                if displaying.endswith(function):
                    displaying = displaying[:-len(function)]
                    break
            else:
                displaying = displaying[:-1]
            self.view.update_display(displaying)
        elif key_pressed == "CLR":
            self.error_occurred = False
            self.view.display.configure(foreground="yellow")
            self.view.update_display("")
        else:
            if self.error_occurred:
                self.view.display.configure(foreground="yellow")
                self.view.update_display("")
                self.error_occurred = False
            displaying = self.view.display_text.get()
            new_display = displaying + key_pressed
            self.view.update_display(new_display)

    def function_selected(self, event):
        """Handle selection of functions from the combobox."""
        if self.error_occurred:
            self.view.update_display("")
            self.error_occurred = False
        selected = self.view.function_var.get()
        if selected:
            if not self.view.display_text.get():
                self.view.update_display(f"{selected}(")
            else:
                display_text = self.view.display_text.get()
                if display_text[-1] in self.view.OPERATORS:
                    self.view.update_display(f"{display_text}{selected}(")
                else:
                    self.view.update_display(f"{selected}({display_text})")

    def paren_clicked(self):
        """Adds opening or closing parentheses to the display based on the current content."""
        display_text = self.view.display_text.get()
        if "(" in display_text or ")" in display_text:
            if display_text.count("(") > display_text.count(")"):
                new_display = str(display_text) + ")"
                self.view.update_display(new_display)
            else:
                new_display = str(display_text) + "("
                self.view.update_display(new_display)
        else:
            new_display = str(display_text) + "("
            self.view.update_display(new_display)

    def get_history(self):
        """Returns the calculation history."""
        return self.model.history

    def clear_history(self):
        """Clear the calculation history."""
        self.model.clear_history()
        for label in self.view.history_label:
            label.destroy()
        self.view.history_display = []
        self.view.history_label = []

    def run(self):
        """Run the calculator application."""
        self.view.run()
